@page "/cybersec"
@using QuickType
@using Cve = BlazorApp1.models.gen.Cve
@using BlazorApp1.Pages.Component
@inject IHttpClientFactory ClientFactory

<body>
<h3>CyberSec</h3>
security is such cool
<!-- TODO: event Timeline for CVE -->

<MudPaper Elevation="0" Square="true">
    <MudText>CVE severity </MudText>
    <MudAlert Severity="Severity.Info">Please note: i am working on my own CVE search, and i as i have not figured it quite out right now, you will se a error, this due to a gigantic object that i hope to fix soon!</MudAlert>
    <MudText> API LAST LOADED: @cve.Timestamp</MudText>
    <SearchBar/>
</MudPaper>
<MudPaper>
    @if (err || vuln is null)
    {
        <MudAlert Severity="Severity.Error"> error loading the external API, please let the creator know</MudAlert>
    }
    else
    {
 
   
        <MudList T="Cve">
            @foreach (var feed in vuln)
            {
                
                <MudListItem><MudPaper>
                    <MudText>@feed.Cve.Id</MudText>
                    <MudText>@feed.Cve.Published</MudText>
                    <MudText>@feed.Cve.SourceIdentifier</MudText>
                    <MudText>@feed.Cve.Descriptions.First().Value</MudText>
                </MudPaper></MudListItem>
            }
        </MudList>
    }
</MudPaper>
</body>
@code {

    //add api calls to this 
    public JsonSchema? cve = new JsonSchema();
    public List<Vulnerability> vuln = [];
    bool err = false;
    public DateTime today = DateTime.Today;
    string search;

    protected override async Task OnInitializedAsync()
    {
        string todayinAmerican = today.ToString("yyyy-MM-ddTHH:mm:ssZ");
        var hundrethirtydays = today.Add(new TimeSpan(90, 0, 0, 0));
        string hnrdthirtydaysagoformatted = hundrethirtydays.ToString("yyyy-MM-ddTHH:mm:ssZ");
        Console.WriteLine(today);
        var req = new HttpRequestMessage(HttpMethod.Get, $"https://services.nvd.nist.gov/rest/json/cves/2.0/?resultsPerPage=25&pubStartDate={todayinAmerican}&pubEndDate={hnrdthirtydaysagoformatted}");
        Console.WriteLine(req.RequestUri);
        req.Headers.Add("Accept", "application/json");
        var client = ClientFactory.CreateClient();
        var res = await client.SendAsync(req);
        if (res.IsSuccessStatusCode)
        {

            var responseStream = await res.Content.ReadAsStreamAsync();
            var json = await res.Content.ReadFromJsonAsync<JsonSchema>();
            cve = json;
            Console.WriteLine(responseStream);
            Console.WriteLine(cve.Timestamp.ToString());
            Console.WriteLine(cve.Vulnerabilities.ToString());
            Console.WriteLine($"OK babaush {cve.Vulnerabilities}");
            if (cve.Vulnerabilities != null)
            {
                vuln = cve.Vulnerabilities.ToList();
                vuln.ForEach(o => System.Console.WriteLine(o.ToString()));
            }
            else
            {
                Console.WriteLine("the list i empty");
                vuln = new List<Vulnerability>();
            }
        }
        else
        {
            err = true;
        }

    }

    public async Task Search()
    {
        string todayinAmerican = today.ToString("yyyy-MM-ddTHH:mm:ssZ");
        var hundrethirtydays = today.Add(new TimeSpan(90, 0, 0, 0));
        string hnrdthirtydaysagoformatted = hundrethirtydays.ToString("yyyy-MM-ddTHH:mm:ssZ");
        var req = new HttpRequestMessage(HttpMethod.Get, $"https://services.nvd.nist.gov/rest/json/cves/2.0/?resultsPerPage=25&pubStartDate={todayinAmerican}&pubEndDate={hnrdthirtydaysagoformatted}&keywordSearch={search}");
        req.Headers.Add("Accept", "application/json");
        var client = ClientFactory.CreateClient();
        var res = await client.SendAsync(req);
        if (res.IsSuccessStatusCode)
        {

            var responseStream = await res.Content.ReadAsStreamAsync();
            var json = await res.Content.ReadFromJsonAsync<JsonSchema>();
            cve = json;
            Console.WriteLine(responseStream);
            Console.WriteLine(cve.Timestamp.ToString());
            Console.WriteLine(cve.Vulnerabilities.ToString());
            Console.WriteLine($"OK babaush {cve.Vulnerabilities}");
            if (cve.Vulnerabilities != null)
            {
                vuln = cve.Vulnerabilities.ToList();
                vuln.ForEach(o => System.Console.WriteLine(o.ToString()));
            }
            else
            {
                Console.WriteLine("the list i empty");
                vuln = new List<Vulnerability>();
            }
        }
        else
        {
            err = true;
        }
    }

}