@page "/cybersec"
@using QuickType
@using Cve = BlazorApp1.models.gen.Cve
@using BlazorApp1.Pages.Component
@inject IHttpClientFactory ClientFactory

<body>
<MudText Typo="Typo.h2">Cyber security CVE Feed</MudText>
<!-- TODO: event Timeline for CVE -->
<MudText Typo="Typo.body1">
    On this site i use <abbr title="National insitute of Standard Technologies">NIST</abbr> own api to gather information about known <abbr title="Common Vulnaribilites and Exposures">CVE</abbr>. as this a api that are based in the US (and i am in EU), my goal is eventually to find another api if it exists
    More info will be added on the <a href="/technologiesbehind">behind the scenes</a> page!
</MudText>
<MudPaper Elevation="0" Square="true">
    <MudText>CVE severity </MudText>
    <MudAlert Severity="Severity.Info">Please note: i am working on CVE search, there might be some wierd stuff here and there, but enjoy!</MudAlert>
    <MudText> API LAST LOADED: @cve.Timestamp</MudText>
    <SearchBar vuln="vuln" @ref="searchBar"/>
</MudPaper>
<MudPaper>
    @if (err || vuln is null) //checks the error variable 
    {
        <MudAlert Severity="Severity.Error"> error loading the external API, please let the creator know</MudAlert>
    }
    else
    {
        <MudList T="Cve">
            @foreach (var feed in vuln)
            {
                <MudListItem>
                    <MudPaper>
                        <MudText>
                            <MudText>
                                <b>Name: </b>
                            </MudText>@feed.Cve.Id
                        </MudText>
                        <MudText>
                            <MudText>
                                <b>Published: </b>
                            </MudText>@feed.Cve.Published
                        </MudText>
                        <MudText>
                            <MudText>
                                <b>Source: </b>
                            </MudText>@feed.Cve.SourceIdentifier
                        </MudText>
                        <MudText>
                            <MudText>
                                <b>Description: </b>
                            </MudText>@feed.Cve.Descriptions.First().Value
                        </MudText>
                        <MudText>
                            <MudText><b>Status: </b></MudText>
                            @feed.Cve.VulnStatus
                        </MudText>
                    </MudPaper>
                </MudListItem>
            }
        </MudList>
    }
</MudPaper>
</body>

@code {

    //add api calls to this 
    public JsonSchema? cve = new JsonSchema();
    public List<Vulnerability> vuln = [];
    bool err = false;
    public DateTime today = DateTime.Today;
    public string timeFormat = "yyyy-MM-ddTHH:mm:ssZ";
    private SearchBar searchBar { get; set; }

    protected override async Task OnInitializedAsync()
    {
        string todayinAmerican = today.ToString(timeFormat);
        var hundrethirtydays = today.Add(new TimeSpan(120, 0, 0, 0));
        string hnrdthirtydaysagoformatted = hundrethirtydays.ToString(timeFormat);
        string url = $"https://services.nvd.nist.gov/rest/json/cves/2.0/?resultsPerPage=25&pubStartDate={todayinAmerican}&pubEndDate={hnrdthirtydaysagoformatted}";
        var req = new HttpRequestMessage(HttpMethod.Get, url);
        Console.WriteLine(req.RequestUri);
        //if (searchBar != null)
        //{
        //    searchBar.SearchChanged += HandleSearchUpdated;
        //}

        req.Headers.Add("Accept", "application/json");
        var client = ClientFactory.CreateClient();
        var res = await client.SendAsync(req);
        if (res.IsSuccessStatusCode)
        {
            var responseStream = await res.Content.ReadAsStreamAsync();
            var json = await res.Content.ReadFromJsonAsync<JsonSchema>();
            cve = json;
            Console.WriteLine(responseStream);
            Console.WriteLine($"Getting timestamps from THE NIST CV API AT THE DATE:  {cve.Timestamp}");
            vuln.Clear();
            if (cve.Vulnerabilities != null) //checks if the list is empty
            {
                vuln.AddRange(cve.Vulnerabilities.ToList());
            }
            else
            {
                Console.WriteLine("the list i empty");
            }
        }
        else
        {
            err = true; //error confirms, render a error message for the end user
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (searchBar is not null)
        {
            searchBar.SearchChanged += HandleSearchUpdated;
        }
    }

    private void HandleSearchUpdated(object? sender, EventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }


}